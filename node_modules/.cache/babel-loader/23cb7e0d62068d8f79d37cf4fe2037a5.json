{"ast":null,"code":"var _jsxFileName = \"/Users/rezanceva96/movies-explorer-frontend/src/components/SavedMovies/SavedMovies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MoviesCardList from \"../MoviesCardList/MoviesCardList\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport Header from \"../Header/Header\";\nimport Navigation from \"../Navigation/Navigation\";\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\nimport Footer from '../Footer/Footer';\nimport { useLocation } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SavedMovies(_ref) {\n  _s();\n\n  let {\n    onHeaderOpen,\n    favoriteList,\n    setFavoriteList,\n    handleDeleteMovies,\n    moviesList,\n    setMoviesList,\n    moviesCount,\n    setMoviesCount,\n    addMovies,\n    setAddMovies,\n    isLoading,\n    setIsLoading\n  } = _ref;\n  const routes = useLocation();\n  const valueData = localStorage.getItem('value');\n  const [value, setValue] = React.useState(valueData && routes.pathname === '/movies' ? valueData : ''); // стейт-переменная состояния тумблера\n\n  const checkBoxStatus = JSON.parse(localStorage.getItem('checkBoxStatus'));\n  const [checked, setChecked] = useState(false);\n  const [shortList, setShortList] = useState([]);\n  const [message, setMessage] = React.useState(''); // фильтрация через строку поиска\n\n  useEffect(() => {\n    const filterMovies = filterMovies.filter(movie => movie.nameRU.toLowerCase().indexOf(value.toLowerCase()) > -1);\n\n    if (filterMovies.length) {\n      setFavoriteList(filterMovies);\n    } else {\n      setFavoriteList([]);\n      setMessage('Ничего не найдено');\n    }\n  }, [value]);\n\n  function handleSubmitSearchForm(value) {\n    setValue(value);\n  } // фильтрация массива через установку тумблера (продолжительность фильма)\n\n\n  useEffect(() => {\n    if (checked) {\n      const newShortList = favoriteList.filter(movie => movie.duration <= 40);\n      newShortList.length ? setShortList(newShortList) : setFavoriteList([]);\n    } else {\n      setShortList([]);\n      setMessage('Ничего не найдено');\n    }\n  }, [checked]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"movies movies_saved\",\n    children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n      setMoviesCount: setMoviesCount,\n      value: value,\n      setValue: setValue,\n      handleSubmitSearchForm: handleSubmitSearchForm,\n      checkBoxStatus: checkBoxStatus,\n      checked: checked,\n      setChecked: setChecked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MoviesCardList, {\n      favoriteList: checked ? shortList : favoriteList,\n      handleDeleteMovies: handleDeleteMovies,\n      moviesList: moviesList,\n      setMoviesList: setMoviesList,\n      setMoviesCount: setMoviesCount,\n      moviesCount: moviesCount,\n      addMovies: addMovies,\n      setAddMovies: setAddMovies,\n      message: message,\n      setMessage: setMessage,\n      isLoading: isLoading,\n      setIsLoading: setIsLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SavedMovies, \"E7NYLOPGufDcepixOotF3UpomKA=\", false, function () {\n  return [useLocation];\n});\n\n_c = SavedMovies;\nexport default SavedMovies;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavedMovies\");","map":{"version":3,"sources":["/Users/rezanceva96/movies-explorer-frontend/src/components/SavedMovies/SavedMovies.js"],"names":["React","useState","useEffect","MoviesCardList","SearchForm","Header","Navigation","CurrentUserContext","Footer","useLocation","SavedMovies","onHeaderOpen","favoriteList","setFavoriteList","handleDeleteMovies","moviesList","setMoviesList","moviesCount","setMoviesCount","addMovies","setAddMovies","isLoading","setIsLoading","routes","valueData","localStorage","getItem","value","setValue","pathname","checkBoxStatus","JSON","parse","checked","setChecked","shortList","setShortList","message","setMessage","filterMovies","filter","movie","nameRU","toLowerCase","indexOf","length","handleSubmitSearchForm","newShortList","duration"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport MoviesCardList from \"../MoviesCardList/MoviesCardList\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport Header from \"../Header/Header\";\nimport Navigation from \"../Navigation/Navigation\";\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\nimport Footer from '../Footer/Footer';\nimport { useLocation } from 'react-router';\n\n\n\nfunction SavedMovies({ onHeaderOpen,\n    favoriteList,\n    setFavoriteList,\n    handleDeleteMovies,\n    moviesList,\n    setMoviesList,\n    moviesCount,\n    setMoviesCount,\n    addMovies,\n    setAddMovies,\n    isLoading,\n    setIsLoading, }) {\n\n\n    const routes = useLocation()\n    const valueData = localStorage.getItem('value')\n    const [value, setValue] = React.useState(valueData && routes.pathname === '/movies' ? valueData : '')\n\n    // стейт-переменная состояния тумблера\n    const checkBoxStatus = JSON.parse(localStorage.getItem('checkBoxStatus'));\n    const [checked, setChecked] = useState(false);\n    const [shortList, setShortList] = useState([])\n\n    const [message, setMessage] = React.useState('')\n\n    // фильтрация через строку поиска\n    useEffect(() => {\n        const filterMovies = filterMovies.filter((movie) =>\n            movie.nameRU.toLowerCase().indexOf(value.toLowerCase()) > -1)\n        if (filterMovies.length) {\n            setFavoriteList(filterMovies)\n        } else {\n            setFavoriteList([]);\n            setMessage('Ничего не найдено');\n        }\n    }, [value])\n\n    function handleSubmitSearchForm(value) {\n        setValue(value);\n    }\n    \n    // фильтрация массива через установку тумблера (продолжительность фильма)\n    useEffect(() => {\n        if (checked) {\n            const newShortList = favoriteList.filter(movie => movie.duration <= 40)\n            newShortList.length ?\n                setShortList(newShortList) : setFavoriteList([])\n        } else {\n            setShortList([]);\n            setMessage('Ничего не найдено');\n        }\n    }, [checked])\n    \n\n    return (\n        <section className=\"movies movies_saved\">\n            <SearchForm setMoviesCount={setMoviesCount}\n                value={value}\n                setValue={setValue}\n                handleSubmitSearchForm={handleSubmitSearchForm}\n                checkBoxStatus={checkBoxStatus}\n                checked={checked}\n                setChecked={setChecked}\n                >\n            </SearchForm>\n            <MoviesCardList\n                favoriteList={checked ? shortList : favoriteList}\n                handleDeleteMovies={handleDeleteMovies}\n                moviesList={moviesList}\n                setMoviesList={setMoviesList}\n                setMoviesCount={setMoviesCount}\n                moviesCount={moviesCount}\n                addMovies={addMovies}\n                setAddMovies={setAddMovies}\n                message={message}\n                setMessage={setMessage}\n                isLoading={isLoading}\n                setIsLoading={setIsLoading}\n            />\n            <Footer></Footer>\n        </section>\n    );\n}\n\nexport default SavedMovies;\n"]},"metadata":{},"sourceType":"module"}