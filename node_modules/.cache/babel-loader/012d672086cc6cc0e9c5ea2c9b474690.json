{"ast":null,"code":"var _jsxFileName = \"/Users/rezanceva96/movies-explorer-frontend/src/components/App/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Routes, Route, Navigate, useNavigate, useLocation } from \"react-router-dom\";\nimport Movies from '../Movies/Movies.js';\nimport HeaderPopup from '../HeaderPopup/HeaderPopup.js';\nimport SavedMovies from '../SavedMovies/SavedMovies.js';\nimport NotFound from '../NotFound/NotFound.js';\nimport Profile from '../Profile/Profile.js';\nimport Login from '../Login/Login.js';\nimport Register from '../Register/Register.js';\nimport Main from '../Main/Main.js';\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext.js';\nimport { mainApi } from '../../utils/MainApi.js';\nimport moviesApi from \"../../utils/MoviesApi.js\";\nimport notRegister from \"../../images/negativ-result.svg\";\nimport register from \"../../images/positiv_result.svg\";\nimport InfoTooLtip from '../InfoTooLtip/InfoTooltip.js';\nimport Header from '../Header/Header.js';\nimport Navigation from '../Navigation/Navigation.js';\nimport SigninButton from '../SigninButton/SigninButton.js';\nimport ScreenSize from '../../hooks/ScreenSize.js';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const routes = useLocation();\n  const isHeader = routes.pathname === '/movies' || routes.pathname === '/' || routes.pathname === '/saved-movies' || routes.pathname === '/profile'; // стейт, отвечающий за данные текущего пользвателя, сюда сохраняются данные о пользователе\n\n  const [currentUser, setCurrentUser] = React.useState({}); // стэйт переменная открыти попапа\n\n  const [isPopupOpen, setIsPopupOpen] = React.useState(false); // стэйт переменные регистрации и авторизации\n\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n  const [isUserCheck, setIsUserCheck] = React.useState(false);\n  const [registerError, setRegisterError] = React.useState(\"\");\n  const [loginError, setLoginError] = React.useState(\"\");\n  const [changeError, setChangeError] = React.useState(\"\"); // переменные состояния для попапов результата регистрации (не реализовано, оставлено напоследок)\n\n  const [image, setImage] = React.useState(\"\");\n  const [title, setTitle] = React.useState(\"\");\n  const [isInfoTooLtip, setIsInfoTooLtip] = React.useState(false); // переменная состояния для сохраненных фильмов в избранном\n\n  const [favoriteList, setFavoriteList] = React.useState([]);\n  const [favoriteListForRender, setFavoriteListForRender] = React.useState([]);\n  const [shortList, setShortList] = React.useState([]);\n  const [moviesList, setMoviesList] = React.useState([]); // переменные состояния для добавления фильмов\n\n  const [moviesCount, setMoviesCount] = React.useState(0);\n  const [addMovies, setAddMovies] = React.useState(0);\n  const navigate = useNavigate(); // ширина\n\n  const width = ScreenSize(); // отображение прейлодера\n\n  const [isLoading, setIsLoading] = React.useState(false); // открытие попапов\n\n  function onHeaderOpen() {\n    setIsPopupOpen(true);\n  } // закрытие попапов\n\n\n  function closeAllPopups() {\n    setIsPopupOpen(false);\n    setIsInfoTooLtip(false);\n  } // для результата авторизации и регистрации и изменения пользователя\n\n\n  function handleInfoTooLtip() {\n    setIsInfoTooLtip(true);\n  } // добавление карточек в зависимости от ширины экрана\n\n\n  useEffect(() => {\n    function getCards() {\n      if (width >= 1280) {\n        setMoviesCount(12);\n        setAddMovies(3);\n      } else if (width < 1279 && width >= 767) {\n        setMoviesCount(8);\n        setAddMovies(2);\n      } else if (width <= 766) {\n        setMoviesCount(5);\n        setAddMovies(1);\n      }\n    }\n\n    getCards();\n  }, [width]);\n  console.log(isLoggedIn); // рендер коллекции карточек\n\n  useEffect(() => {\n    const jwt = localStorage.getItem(\"jwt\");\n    setIsLoading(true); // рендер первоначальной коллекции фильмов\n\n    moviesApi.getInitialCards().then(movies => {\n      setMoviesList(movies);\n      sessionStorage.setItem('movies', JSON.stringify(movies));\n      setIsLoading(false);\n    }).catch(err => {\n      console.log(`Внимание! ${err}`);\n    }); // рендер сохраненных фильмов\n\n    mainApi.getMovies(jwt).then(res => {\n      console.log(res); //  console.log('отработал useEffect рендера списка сохраненных фильмов')\n\n      setFavoriteList(res[2].data);\n      localStorage.setItem('savedMovies', JSON.stringify(res[2].data));\n      setIsLoading(false);\n    }).catch(err => {\n      console.log(`Внимание! ${err}`);\n    });\n  }, []); //console.log(favoriteList)\n  // сохранение фильма\n\n  function handleSaveMovies(movie) {\n    const jwt = localStorage.getItem(\"jwt\");\n    console.log(movie);\n    setFavoriteList([...favoriteList, movie]);\n    mainApi.savedMovies({\n      jwt,\n      movie\n    }).then(res => {\n      console.log(res);\n      console.log(favoriteList);\n      setFavoriteList([...favoriteList, res]);\n      localStorage.setItem('savedMovies', JSON.stringify([...favoriteList, res]));\n    }).catch(err => {\n      console.log(`Внимание! ${err}`);\n    });\n  } // удаление фильма\n\n\n  function handleDeleteMovies(movie) {\n    const jwt = localStorage.getItem(\"jwt\");\n    const id = movie.movieId || movie.id;\n\n    const movieId = movie._id || favoriteList.find(item => item.movieId === movie.id)._id;\n\n    mainApi.deleteMovies({\n      jwt,\n      movieId\n    }).then(res => {\n      console.log(res);\n\n      if (res) {\n        const arr = JSON.parse(localStorage.getItem('savedMovies')).filter(item => item.movieId !== id);\n        setFavoriteList(arr);\n        setFavoriteListForRender(arr);\n        localStorage.setItem('savedMovies', JSON.stringify(arr));\n      }\n    }).catch(err => {\n      console.log(`Внимание! ${err}`);\n    });\n  } // изменение инорфмации о пользователе\n\n\n  function handleUpdateUser(_ref) {\n    let {\n      name,\n      email\n    } = _ref;\n    const jwt = localStorage.getItem(\"jwt\");\n    mainApi.updateUser({\n      jwt,\n      name,\n      email\n    }).then(user => {\n      setTitle(\"Данные успешно изменены!\");\n      setImage(register);\n\n      if (user._id) {\n        setCurrentUser(user);\n      }\n    }).catch(err => {\n      console.log(`Внимание! ${err}`);\n      setTitle(\"Что-то пошло не так! Попробуйте ещё раз.\");\n      setImage(notRegister);\n    }).finally(handleInfoTooLtip);\n  } // проверка токенов авторизованных пользователей, вернувшихся в приложение\n\n\n  useEffect(() => {\n    console.log('useEffect в App отработал');\n    checkToken();\n  }, [navigate]);\n\n  function checkToken() {\n    const jwt = localStorage.getItem(\"jwt\");\n\n    if (jwt) {\n      setIsLoggedIn(true);\n      mainApi.getUserInfo(jwt).then(profile => {\n        setIsLoggedIn(true);\n        console.log(profile);\n        setCurrentUser(profile);\n        localStorage.setItem('currentUser', JSON.stringify(profile));\n        navigate(routes.pathname);\n      }).catch(err => {\n        navigate('/signin');\n        console.log(`Внимание! ${err}`);\n      });\n    }\n  } // регистрация\n\n\n  function onRegister(_ref2) {\n    let {\n      email,\n      password,\n      name\n    } = _ref2;\n    mainApi.register({\n      email,\n      password,\n      name\n    }).then(data => {\n      onLogin({\n        email,\n        password\n      });\n      navigate('/movies');\n      setTitle(\"Вы успешно зарегистрировались!\");\n      setImage(register);\n      setIsLoggedIn(true);\n    }).catch(err => {\n      console.log(`Внимание! ${err}`);\n      setTitle(\"Что-то пошло не так! Попробуйте ещё раз.\");\n      setImage(notRegister);\n      if (err === 400) return setRegisterError('Некорректно заполнено одно из полей');\n      setRegisterError('Что-то пошло не так, попробуйте еще раз!');\n    }).finally(handleInfoTooLtip);\n  } // авторизация\n\n\n  function onLogin(_ref3) {\n    let {\n      email,\n      password\n    } = _ref3;\n    mainApi.login({\n      email,\n      password\n    }).then(res => {\n      navigate('/movies');\n      setData();\n      localStorage.setItem(\"jwt\", res.token);\n      localStorage.setItem('currentUser', JSON.stringify(res)); // console.log(res.token);\n\n      localStorage.setItem('isLoggedIn', true);\n      setIsLoggedIn(true);\n      return res;\n    }).catch(err => {\n      console.log(`Внимание! ${err}`);\n      setLoginError('Что-то пошло не так, попробуйте еще раз!');\n      if (err === 400) return setRegisterError('Некорректно заполнено одно из полей');\n      setTitle(\"Что-то пошло не так! Попробуйте ещё раз.\");\n      setImage(notRegister);\n      handleInfoTooLtip();\n    });\n  }\n\n  function setData() {\n    const jwt = localStorage.getItem(\"jwt\");\n    const profileInfo = mainApi.getUserInfo(jwt);\n    const movies = moviesApi.getInitialCards();\n    const favoriteMovies = mainApi.getMovies(jwt);\n    Promise.all([profileInfo, movies, favoriteMovies]).then(res => {\n      setCurrentUser(res);\n      setMoviesList(res);\n      setFavoriteList(res[2].data);\n      localStorage.setItem('currentUser', JSON.stringify(res));\n      localStorage.setItem('movies', JSON.stringify(res));\n      localStorage.setItem('savedMovies', JSON.stringify(res[2].data));\n    }).catch(err => {\n      console.log(`Внимание! ${err}`);\n    });\n  }\n\n  ; // удаление токена при выходе\n\n  function signOut() {\n    console.log('signOut в App отработал');\n    localStorage.clear();\n    navigate(\"/\"); //setFavoriteList([]);\n    //  setMoviesList([]);\n\n    setCurrentUser([]);\n    setIsLoggedIn(false);\n  }\n\n  console.log(currentUser);\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [isHeader && /*#__PURE__*/_jsxDEV(Header, {\n        children: isLoggedIn ? /*#__PURE__*/_jsxDEV(Navigation, {\n          onHeaderOpen: onHeaderOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(SigninButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 70\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/movies\",\n          element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n            isLoggedIn: isLoggedIn,\n            component: Movies,\n            onHeaderOpen: onHeaderOpen,\n            handleSaveMovies: handleSaveMovies,\n            handleDeleteMovies: handleDeleteMovies,\n            favoriteList: favoriteList,\n            moviesList: moviesList,\n            setMoviesList: setMoviesList,\n            moviesCount: moviesCount,\n            setMoviesCount: setMoviesCount,\n            addMovies: addMovies,\n            setAddMovies: setAddMovies,\n            isLoading: isLoading,\n            setIsLoading: setIsLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/saved-movies\",\n          element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n            component: SavedMovies,\n            isLoggedIn: isLoggedIn,\n            onHeaderOpen: onHeaderOpen,\n            favoriteList: favoriteList,\n            setFavoriteList: setFavoriteList,\n            favoriteListForRender: favoriteListForRender,\n            setFavoriteListForRender: setFavoriteListForRender,\n            shortList: shortList,\n            setShortList: setShortList,\n            handleDeleteMovies: handleDeleteMovies,\n            handleSaveMovies: handleSaveMovies,\n            moviesList: moviesList,\n            setMoviesList: setMoviesList,\n            moviesCount: moviesCount,\n            setMoviesCount: setMoviesCount,\n            addMovies: addMovies,\n            setAddMovies: setAddMovies,\n            isLoading: isLoading,\n            setIsLoading: setIsLoading,\n            isLoading: isLoading,\n            setIsLoading: setIsLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/profile\",\n          element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n            component: Profile,\n            isLoggedIn: isLoggedIn,\n            signOut: signOut,\n            onUpdateUser: handleUpdateUser,\n            changeError: changeError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signin\",\n          element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n            component: Login,\n            isLoggedIn: !isLoggedIn,\n            onLogin: onLogin,\n            loginError: loginError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n            component: Register,\n            isLoggedIn: !isLoggedIn,\n            onRegister: onRegister,\n            registerError: registerError,\n            setRegisterError: setRegisterError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(HeaderPopup, {\n        isOpen: isPopupOpen,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoTooLtip, {\n        image: image,\n        title: title,\n        onClose: closeAllPopups,\n        isOpen: isInfoTooLtip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+hYzFd5CqC+S1b+O43r2R8U7iBo=\", false, function () {\n  return [useLocation, useNavigate];\n});\n\n_c = App;\nexport default App;\n/*\n1. После выхода из приложение стейт в апп показывает фалс, но в продект роут прокидывается тру\n2. После авторизации в приложении первоначальный рендер коллекции карточек выдает ошибку, после обновления все начинает работать\n3. В профайл приходит информация только после обновления (решено, но зациклена переадресация)\n3. Как сделать так, чтобы за конкретным пользователем закреплялись конкретнные сохраненные фильмы\n4. После обновления страницы все слетает, лайки и сохраненные фильмы должны оставаться\n5. после входа попадаем на страницу главную, хотя направление стоит на фильмы\n\nосновные проблемы:\n1 циклический редирект\n2 стейт логина в продект роут идет тру, даже если в апп он фолс\n3 как за конкретным пользователем сохранить его фильмы, чтобы при новом заходе все оставалось\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/rezanceva96/movies-explorer-frontend/src/components/App/App.js"],"names":["React","useEffect","Routes","Route","Navigate","useNavigate","useLocation","Movies","HeaderPopup","SavedMovies","NotFound","Profile","Login","Register","Main","CurrentUserContext","mainApi","moviesApi","notRegister","register","InfoTooLtip","Header","Navigation","SigninButton","ScreenSize","ProtectedRoute","App","routes","isHeader","pathname","currentUser","setCurrentUser","useState","isPopupOpen","setIsPopupOpen","isLoggedIn","setIsLoggedIn","isUserCheck","setIsUserCheck","registerError","setRegisterError","loginError","setLoginError","changeError","setChangeError","image","setImage","title","setTitle","isInfoTooLtip","setIsInfoTooLtip","favoriteList","setFavoriteList","favoriteListForRender","setFavoriteListForRender","shortList","setShortList","moviesList","setMoviesList","moviesCount","setMoviesCount","addMovies","setAddMovies","navigate","width","isLoading","setIsLoading","onHeaderOpen","closeAllPopups","handleInfoTooLtip","getCards","console","log","jwt","localStorage","getItem","getInitialCards","then","movies","sessionStorage","setItem","JSON","stringify","catch","err","getMovies","res","data","handleSaveMovies","movie","savedMovies","handleDeleteMovies","id","movieId","_id","find","item","deleteMovies","arr","parse","filter","handleUpdateUser","name","email","updateUser","user","finally","checkToken","getUserInfo","profile","onRegister","password","onLogin","login","setData","token","profileInfo","favoriteMovies","Promise","all","signOut","clear"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Routes, Route, Navigate, useNavigate, useLocation } from \"react-router-dom\";\nimport Movies from '../Movies/Movies.js';\nimport HeaderPopup from '../HeaderPopup/HeaderPopup.js';\nimport SavedMovies from '../SavedMovies/SavedMovies.js';\nimport NotFound from '../NotFound/NotFound.js';\nimport Profile from '../Profile/Profile.js';\nimport Login from '../Login/Login.js';\nimport Register from '../Register/Register.js';\nimport Main from '../Main/Main.js';\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext.js';\nimport { mainApi } from '../../utils/MainApi.js';\nimport moviesApi from \"../../utils/MoviesApi.js\";\nimport notRegister from \"../../images/negativ-result.svg\";\nimport register from \"../../images/positiv_result.svg\";\nimport InfoTooLtip from '../InfoTooLtip/InfoTooltip.js';\nimport Header from '../Header/Header.js';\nimport Navigation from '../Navigation/Navigation.js';\nimport SigninButton from '../SigninButton/SigninButton.js';\nimport ScreenSize from '../../hooks/ScreenSize.js';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute.js';\n\nfunction App() {\n  const routes = useLocation();\n\n  const isHeader =\n    routes.pathname === '/movies' ||\n    routes.pathname === '/' ||\n    routes.pathname === '/saved-movies' ||\n    routes.pathname === '/profile';\n\n\n  // стейт, отвечающий за данные текущего пользвателя, сюда сохраняются данные о пользователе\n  const [currentUser, setCurrentUser] = React.useState({});\n  // стэйт переменная открыти попапа\n  const [isPopupOpen, setIsPopupOpen] = React.useState(false);\n\n  // стэйт переменные регистрации и авторизации\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n  const [isUserCheck, setIsUserCheck] = React.useState(false);\n\n  const [registerError, setRegisterError] = React.useState(\"\");\n  const [loginError, setLoginError] = React.useState(\"\");\n  const [changeError, setChangeError] = React.useState(\"\");\n\n  // переменные состояния для попапов результата регистрации (не реализовано, оставлено напоследок)\n  const [image, setImage] = React.useState(\"\");\n  const [title, setTitle] = React.useState(\"\");\n  const [isInfoTooLtip, setIsInfoTooLtip] = React.useState(false);\n\n  // переменная состояния для сохраненных фильмов в избранном\n  const [favoriteList, setFavoriteList] = React.useState([]);\n  const [favoriteListForRender, setFavoriteListForRender] = React.useState([]);\n  const [shortList, setShortList] = React.useState([]);\n\n  const [moviesList, setMoviesList] = React.useState([]);\n  // переменные состояния для добавления фильмов\n  const [moviesCount, setMoviesCount] = React.useState(0);\n  const [addMovies, setAddMovies] = React.useState(0);\n\n  const navigate = useNavigate();\n\n  // ширина\n  const width = ScreenSize();\n\n  // отображение прейлодера\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  // открытие попапов\n  function onHeaderOpen() {\n    setIsPopupOpen(true)\n  }\n\n  // закрытие попапов\n  function closeAllPopups() {\n    setIsPopupOpen(false);\n    setIsInfoTooLtip(false);\n  }\n  // для результата авторизации и регистрации и изменения пользователя\n  function handleInfoTooLtip() {\n    setIsInfoTooLtip(true);\n  }\n\n  // добавление карточек в зависимости от ширины экрана\n  useEffect(() => {\n    function getCards() {\n      if (width >= 1280) {\n        setMoviesCount(12);\n        setAddMovies(3);\n      } else if (width < 1279 && width >= 767) {\n        setMoviesCount(8);\n        setAddMovies(2);\n      } else if (width <= 766) {\n        setMoviesCount(5);\n        setAddMovies(1);\n      }\n    }\n    getCards()\n  }, [width])\n\n  console.log(isLoggedIn)\n\n  // рендер коллекции карточек\n  useEffect(() => {\n    const jwt = localStorage.getItem(\"jwt\");\n    setIsLoading(true);\n    // рендер первоначальной коллекции фильмов\n    moviesApi.getInitialCards()\n      .then((movies) => {\n        setMoviesList(movies);\n        sessionStorage.setItem('movies', JSON.stringify(movies));\n        setIsLoading(false);\n      }).catch((err) => {\n        console.log(`Внимание! ${err}`);\n      });\n\n    // рендер сохраненных фильмов\n    mainApi.getMovies(jwt).then((res) => {\n      console.log(res)\n      //  console.log('отработал useEffect рендера списка сохраненных фильмов')\n      setFavoriteList(res[2].data);\n      localStorage.setItem('savedMovies', JSON.stringify(res[2].data));\n      setIsLoading(false);\n    })\n      .catch((err) => {\n        console.log(`Внимание! ${err}`);\n      });\n\n  }, [])\n\n\n\n\n\n  //console.log(favoriteList)\n\n\n  // сохранение фильма\n  function handleSaveMovies(movie) {\n    const jwt = localStorage.getItem(\"jwt\");\n    console.log(movie)\n    setFavoriteList([...favoriteList, movie]);\n    mainApi.savedMovies({ jwt, movie })\n      .then((res) => {\n        console.log(res)\n        console.log(favoriteList)\n        setFavoriteList([...favoriteList, res]);\n        localStorage.setItem('savedMovies', JSON.stringify([...favoriteList, res]));\n      })\n      .catch((err) => {\n        console.log(`Внимание! ${err}`);\n      })\n  }\n\n\n  // удаление фильма\n  function handleDeleteMovies(movie) {\n    const jwt = localStorage.getItem(\"jwt\");\n    const id = movie.movieId || movie.id;\n    const movieId =\n      movie._id || favoriteList.find((item) => item.movieId === movie.id)._id;\n    mainApi.deleteMovies({ jwt, movieId }).\n      then((res) => {\n        console.log(res);\n        if (res) {\n          const arr = JSON.parse(localStorage.getItem('savedMovies')).filter((item) => item.movieId !== id);\n          setFavoriteList(arr)\n          setFavoriteListForRender(arr);\n          localStorage.setItem('savedMovies', JSON.stringify(arr));\n        }\n      })\n      .catch((err) => {\n        console.log(`Внимание! ${err}`);\n      })\n  }\n\n\n\n  // изменение инорфмации о пользователе\n  function handleUpdateUser({ name, email }) {\n    const jwt = localStorage.getItem(\"jwt\");\n    mainApi.updateUser({ jwt, name, email })\n      .then((user) => {\n        setTitle(\"Данные успешно изменены!\");\n        setImage(register);\n        if (user._id) {\n          setCurrentUser(user);\n        }\n      }).catch((err) => {\n        console.log(`Внимание! ${err}`);\n        setTitle(\"Что-то пошло не так! Попробуйте ещё раз.\");\n        setImage(notRegister);\n      }).finally(handleInfoTooLtip)\n  }\n\n\n  // проверка токенов авторизованных пользователей, вернувшихся в приложение\n  useEffect(() => {\n    console.log('useEffect в App отработал');\n    checkToken();\n  }, [navigate]);\n\n  function checkToken() {\n    const jwt = localStorage.getItem(\"jwt\");\n    if (jwt) {\n      setIsLoggedIn(true);\n      mainApi.getUserInfo(jwt)\n        .then((profile) => {\n          setIsLoggedIn(true);\n          console.log(profile)\n          setCurrentUser(profile);\n          localStorage.setItem('currentUser', JSON.stringify(profile))\n          navigate(routes.pathname);\n        })\n        .catch((err) => {\n          navigate('/signin');\n          console.log(`Внимание! ${err}`);\n        })\n    }\n  }\n\n\n  // регистрация\n  function onRegister({ email, password, name }) {\n    mainApi.register({ email, password, name })\n      .then((data) => {\n        onLogin({ email, password });\n        navigate('/movies');\n        setTitle(\"Вы успешно зарегистрировались!\");\n        setImage(register);\n        setIsLoggedIn(true);\n      }).catch((err) => {\n        console.log(`Внимание! ${err}`);\n        setTitle(\"Что-то пошло не так! Попробуйте ещё раз.\");\n        setImage(notRegister);\n        if (err === 400) return setRegisterError('Некорректно заполнено одно из полей');\n        setRegisterError('Что-то пошло не так, попробуйте еще раз!')\n      }).finally(handleInfoTooLtip)\n  }\n\n\n\n  // авторизация\n  function onLogin({ email, password }) {\n    mainApi.login({ email, password })\n      .then((res) => {\n        navigate('/movies');\n        setData();\n        localStorage.setItem(\"jwt\", res.token);\n        localStorage.setItem('currentUser', JSON.stringify(res));\n        // console.log(res.token);\n        localStorage.setItem('isLoggedIn', true)\n        setIsLoggedIn(true);\n        return res;\n      })\n      .catch((err) => {\n        console.log(`Внимание! ${err}`);\n        setLoginError('Что-то пошло не так, попробуйте еще раз!');\n        if (err === 400) return setRegisterError('Некорректно заполнено одно из полей');\n        setTitle(\"Что-то пошло не так! Попробуйте ещё раз.\");\n        setImage(notRegister);\n        handleInfoTooLtip()\n      })\n  }\n\n  function setData() {\n    const jwt = localStorage.getItem(\"jwt\");\n    const profileInfo = mainApi.getUserInfo(jwt);\n    const movies = moviesApi.getInitialCards();\n    const favoriteMovies = mainApi.getMovies(jwt);\n    Promise.all([profileInfo, movies, favoriteMovies])\n      .then((res) => {\n        setCurrentUser(res);\n        setMoviesList(res);\n        setFavoriteList(res[2].data);\n\n        localStorage.setItem('currentUser', JSON.stringify(res));\n        localStorage.setItem('movies', JSON.stringify(res));\n        localStorage.setItem('savedMovies', JSON.stringify(res[2].data));\n\n      }).catch((err) => {\n        console.log(`Внимание! ${err}`);\n      })\n  };\n\n\n  // удаление токена при выходе\n  function signOut() {\n    console.log('signOut в App отработал')\n    localStorage.clear();\n    navigate(\"/\");\n    //setFavoriteList([]);\n    //  setMoviesList([]);\n    setCurrentUser([]);\n    setIsLoggedIn(false);\n  }\n\n  console.log(currentUser)\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"App\">\n        {isHeader && <Header>\n          {isLoggedIn ? <Navigation onHeaderOpen={onHeaderOpen} /> : <SigninButton />}\n        </Header>}\n\n        {<Routes>\n          <Route path='/movies' element={\n            <ProtectedRoute\n              isLoggedIn={isLoggedIn}\n              component={Movies}\n              onHeaderOpen={onHeaderOpen}\n              handleSaveMovies={handleSaveMovies}\n              handleDeleteMovies={handleDeleteMovies}\n              favoriteList={favoriteList}\n              moviesList={moviesList}\n              setMoviesList={setMoviesList}\n              moviesCount={moviesCount}\n              setMoviesCount={setMoviesCount}\n              addMovies={addMovies}\n              setAddMovies={setAddMovies}\n              isLoading={isLoading}\n              setIsLoading={setIsLoading}\n            ></ProtectedRoute>\n          } ></Route>\n          <Route path=\"/\" element={\n\n            <Main />\n\n          } />\n          <Route path=\"/saved-movies\" element={\n\n            <ProtectedRoute\n              component={SavedMovies}\n              isLoggedIn={isLoggedIn}\n              onHeaderOpen={onHeaderOpen}\n              favoriteList={favoriteList}\n              setFavoriteList={setFavoriteList}\n              favoriteListForRender={favoriteListForRender}\n              setFavoriteListForRender={setFavoriteListForRender}\n              shortList={shortList}\n              setShortList={setShortList}\n              handleDeleteMovies={handleDeleteMovies}\n              handleSaveMovies={handleSaveMovies}\n              moviesList={moviesList}\n              setMoviesList={setMoviesList}\n              moviesCount={moviesCount}\n              setMoviesCount={setMoviesCount}\n              addMovies={addMovies}\n              setAddMovies={setAddMovies}\n              isLoading={isLoading}\n              setIsLoading={setIsLoading}\n              isLoading={isLoading}\n              setIsLoading={setIsLoading}\n            >\n            </ProtectedRoute>\n\n          } />\n          <Route path=\"/profile\" element={\n\n            <ProtectedRoute\n              component={Profile}\n              isLoggedIn={isLoggedIn}\n              signOut={signOut}\n              onUpdateUser={handleUpdateUser}\n              changeError={changeError}\n            >\n            </ProtectedRoute>\n\n          } />\n          <Route path=\"/signin\"\n            element={<ProtectedRoute\n              component={Login}\n              isLoggedIn={!isLoggedIn}\n              onLogin={onLogin}\n              loginError={loginError}\n            ></ProtectedRoute>} />\n          <Route path=\"/signup\" element={\n            <ProtectedRoute\n              component={Register}\n              isLoggedIn={!isLoggedIn}\n              onRegister={onRegister}\n              registerError={registerError}\n              setRegisterError={setRegisterError}>\n            </ProtectedRoute>\n          } />\n          <Route path=\"*\" element={\n            <NotFound />\n          } />\n        </Routes>}\n\n        <HeaderPopup isOpen={isPopupOpen}\n          onClose={closeAllPopups}\n        />\n        <InfoTooLtip\n          image={image}\n          title={title}\n          onClose={closeAllPopups}\n          isOpen={isInfoTooLtip}\n        />\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n\n\n/*\n1. После выхода из приложение стейт в апп показывает фалс, но в продект роут прокидывается тру\n2. После авторизации в приложении первоначальный рендер коллекции карточек выдает ошибку, после обновления все начинает работать\n3. В профайл приходит информация только после обновления (решено, но зациклена переадресация)\n3. Как сделать так, чтобы за конкретным пользователем закреплялись конкретнные сохраненные фильмы\n4. После обновления страницы все слетает, лайки и сохраненные фильмы должны оставаться\n5. после входа попадаем на страницу главную, хотя направление стоит на фильмы\n\nосновные проблемы:\n1 циклический редирект\n2 стейт логина в продект роут идет тру, даже если в апп он фолс\n3 как за конкретным пользователем сохранить его фильмы, чтобы при новом заходе все оставалось\n*/\n\n\n\n"]},"metadata":{},"sourceType":"module"}