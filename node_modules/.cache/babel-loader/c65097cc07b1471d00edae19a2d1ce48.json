{"ast":null,"code":"var _jsxFileName = \"/Users/rezanceva96/movies-explorer-frontend/src/components/Movies/Movies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport moviesApi from \"../../utils/MoviesApi.js\";\nimport MoviesCard from \"../MoviesCard/MoviesCard.js\";\nimport MoviesCardList from \"../MoviesCardList/MoviesCardList\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport Footer from \"../Footer/Footer\";\nimport Header from \"../Header/Header\";\nimport Navigation from \"../Navigation/Navigation\";\nimport Preloader from \"../Preloader/Preloader.js\";\nimport { useLocation } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Movies(_ref) {\n  _s();\n\n  let {\n    onHeaderOpen,\n    handleSaveMovies,\n    handleDeleteMovies,\n    moviesList,\n    setMoviesList,\n    favoriteList,\n    moviesCount,\n    setMoviesCount,\n    addMovies,\n    setAddMovies\n  } = _ref;\n  const routes = useLocation();\n  const [value, setValue] = React.useState('');\n  const [isLoading, setIsLoading] = React.useState(false);\n  const queryData = localStorage.getItem('query');\n  const [queryString, setQueryString] = useState(queryData && routes.pathname === '/movies' ? queryData : ''); // Эффект обработки запроса от формы поиска\n\n  useEffect(() => {\n    if (queryString) {\n      const filterMovies = JSON.parse(sessionStorage.getItem('moviesList')).filter(movie => movie.nameRU.toLowerCase().indexOf(queryString.toLowerCase()) > -1);\n\n      if (filterMovies.length) {\n        setMoviesList(filterMovies);\n        localStorage.setItem('listOfFound', JSON.stringify(filterMovies));\n      } else {\n        //  setMessage('Ничего не найдено')\n        setMoviesList([]);\n      }\n    } else {\n      const filterMovies = JSON.parse(sessionStorage.getItem('baseMoviesList'));\n\n      if (filterMovies.length) {\n        setMoviesList(filterMovies);\n        localStorage.setItem('listOfFound', JSON.stringify(filterMovies));\n      } else {\n        //  setMessage('Ничего не найдено')\n        setMoviesList([]);\n      }\n    }\n  }, [queryString]);\n  useEffect(() => {\n    moviesApi.getInitialCards().then(movie => {\n      //  console.log(movie)\n      setMoviesList(movie);\n    }).catch(err => {\n      console.log(`Внимание! ${err}`);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"movies\",\n    children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n      setMoviesCount: setMoviesCount,\n      value: value,\n      setValue: setValue,\n      setMoviesList: setMoviesList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MoviesCardList, {\n      setMoviesCount: setMoviesCount,\n      moviesCount: moviesCount,\n      moviesList: moviesList // filterMovies={filterMovies} \n      ,\n      handleSaveMovies: handleSaveMovies,\n      handleDeleteMovies: handleDeleteMovies,\n      favoriteList: favoriteList,\n      addMovies: addMovies,\n      setAddMovies: setAddMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Movies, \"+dtwNzIXwr9ZtN54ZB+GCwxGG6I=\", false, function () {\n  return [useLocation];\n});\n\n_c = Movies;\nexport default Movies;\n/*\nconst filterMovies = moviesList.filter(movie => {\n        return movie.nameRU.toLowerCase().includes(value.toLowerCase())\n    })\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Users/rezanceva96/movies-explorer-frontend/src/components/Movies/Movies.js"],"names":["React","useEffect","useState","moviesApi","MoviesCard","MoviesCardList","SearchForm","Footer","Header","Navigation","Preloader","useLocation","Movies","onHeaderOpen","handleSaveMovies","handleDeleteMovies","moviesList","setMoviesList","favoriteList","moviesCount","setMoviesCount","addMovies","setAddMovies","routes","value","setValue","isLoading","setIsLoading","queryData","localStorage","getItem","queryString","setQueryString","pathname","filterMovies","JSON","parse","sessionStorage","filter","movie","nameRU","toLowerCase","indexOf","length","setItem","stringify","getInitialCards","then","catch","err","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport moviesApi from \"../../utils/MoviesApi.js\";\nimport MoviesCard from \"../MoviesCard/MoviesCard.js\";\nimport MoviesCardList from \"../MoviesCardList/MoviesCardList\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport Footer from \"../Footer/Footer\";\nimport Header from \"../Header/Header\";\nimport Navigation from \"../Navigation/Navigation\";\nimport Preloader from \"../Preloader/Preloader.js\";\nimport { useLocation } from 'react-router';\n\nfunction Movies({onHeaderOpen, \n    handleSaveMovies, \n    handleDeleteMovies, \n    moviesList, \n    setMoviesList, \n    favoriteList,\n    moviesCount, \n    setMoviesCount,\n    addMovies, \n    setAddMovies  }) {\n        const routes  = useLocation()\n\n    const [value, setValue] = React.useState('');\n    const [isLoading, setIsLoading] = React.useState(false)\n\n    const queryData = localStorage.getItem('query');\n    const [queryString, setQueryString] = useState(queryData && routes.pathname === '/movies' ? queryData : '');\n\n\n    // Эффект обработки запроса от формы поиска\n    useEffect(() => {\n        if (queryString) {\n            const filterMovies = JSON.parse(sessionStorage.getItem('moviesList')).filter((movie) =>\n                movie.nameRU.toLowerCase().indexOf(queryString.toLowerCase()) > -1)\n                if (filterMovies.length) {\n                    setMoviesList(filterMovies)\n                    localStorage.setItem('listOfFound', JSON.stringify(filterMovies))\n                } else {\n                  //  setMessage('Ничего не найдено')\n                    setMoviesList([])\n                } \n            } else {\n                const  filterMovies = JSON.parse(sessionStorage.getItem('baseMoviesList'))\n                if (filterMovies.length) {\n                    setMoviesList(filterMovies)\n                    localStorage.setItem('listOfFound', JSON.stringify(filterMovies))\n                } else {\n                  //  setMessage('Ничего не найдено')\n                  setMoviesList([])\n                } \n            }\n        }, [queryString])\n\n\n\n    useEffect(() => {\n        moviesApi.getInitialCards()\n            .then((movie) => {\n              //  console.log(movie)\n                setMoviesList(movie);\n            })\n            .catch((err) => {\n                console.log(`Внимание! ${err}`);\n            })\n    }, []);\n\n    \n    \n    return (\n        <section className=\"movies\">\n            <SearchForm setMoviesCount={setMoviesCount} \n                        value={value} \n                        setValue={setValue} \n                        setMoviesList={setMoviesList}>\n            </SearchForm>\n            <MoviesCardList  \n            setMoviesCount={setMoviesCount} \n            moviesCount={moviesCount} \n            moviesList={moviesList} \n           // filterMovies={filterMovies} \n            handleSaveMovies={handleSaveMovies} \n            handleDeleteMovies={handleDeleteMovies} \n            favoriteList={favoriteList}\n            addMovies={addMovies}\n            setAddMovies={setAddMovies}\n            />\n            <Footer></Footer>\n        </section>\n\n\n    );\n}\n\nexport default Movies;\n\n/*\nconst filterMovies = moviesList.filter(movie => {\n        return movie.nameRU.toLowerCase().includes(value.toLowerCase())\n    })\n*/"]},"metadata":{},"sourceType":"module"}