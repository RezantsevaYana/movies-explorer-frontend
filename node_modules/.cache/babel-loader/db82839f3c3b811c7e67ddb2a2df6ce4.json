{"ast":null,"code":"// запросы к напсанному апи\nexport class MainApi {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n\n    this.checkToken = jwt => {\n      return fetch(`${this._baseUrl}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${jwt}`\n        }\n      }).then(this._checkResult);\n    };\n\n    this._checkResult = res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    };\n\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  // регистрация \n  register(_ref2) {\n    let {\n      email,\n      password,\n      name\n    } = _ref2;\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password,\n        name\n      })\n    }).then(this._checkResult);\n  }\n\n  // авторизация\n  login(_ref3) {\n    let {\n      email,\n      password\n    } = _ref3;\n    return fetch(`https://api.rezantseva.movies.nomoredomains.xyz/signin`, {\n      mode: 'no-cors',\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(this._checkResult);\n  }\n\n  // возвращает информацию о пользователе\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._checkResult);\n  }\n\n  // обновляет информацию о пользователе (email и имя)\n  editUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: data.name,\n        email: data.email\n      }),\n      headers: this._headers\n    }).then(this._checkResult);\n  }\n\n}\nexport const mainApi = new MainApi({\n  baseUrl: 'https://api.rezantseva.movies.nomoredomains.xyz',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n}); // создаёт фильм","map":{"version":3,"sources":["/Users/rezanceva96/movies-explorer-frontend/src/utils/MainApi.js"],"names":["MainApi","constructor","baseUrl","headers","checkToken","jwt","fetch","_baseUrl","method","then","_checkResult","res","ok","json","Promise","reject","status","_headers","register","email","password","name","body","JSON","stringify","login","mode","getUserInfo","editUserInfo","data","mainApi"],"mappings":"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","sourcesContent":["\n// запросы к напсанному апи\nexport class MainApi{\n    constructor({baseUrl, headers}) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    };\n\n    // регистрация \n    register({email, password, name}) {\n        return fetch(`${this._baseUrl}/signup`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({ email, password, name }),\n        }).then(this._checkResult)\n    };\n\n    // авторизация\n    login({email, password}) {\n        return fetch(`https://api.rezantseva.movies.nomoredomains.xyz/signin`, {\n            mode: 'no-cors',\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({ email, password}),\n        }).then(this._checkResult)\n    };\n\n    // проверка валидности токена и полученя email для вставки в шапку сайта\n    checkToken = (jwt) => {\n        return fetch(`${this._baseUrl}/users/me`, {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${jwt}`,\n        },\n        }).then(this._checkResult);\n    };\n\n    // возвращает информацию о пользователе\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers})\n            .then(this._checkResult);\n    };\n\n    // обновляет информацию о пользователе (email и имя)\n    editUserInfo(data) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            body: JSON.stringify({\n            name: data.name,\n            email: data.email,\n            }),\n            headers: this._headers\n        })\n        .then(this._checkResult);\n    };\n\n    // возвращает все сохранённые текущим  пользователем фильмы\n\n\n    /*\n    // удаляет сохранённый фильм по id\n    deleteCards(cardId) {\n        return fetch(`${this._baseUrl}/movies/${moviesId}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n        .then(this._checkResult);\n    }\n    */\n\n    // проверка ответа\n    _checkResult = (res) => {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    };\n}\n\n\nexport const mainApi = new MainApi({\n    baseUrl: 'https://api.rezantseva.movies.nomoredomains.xyz',\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    },\n});\n\n\n\n\n\n\n\n\n\n\n// создаёт фильм\n\n\n\n"]},"metadata":{},"sourceType":"module"}