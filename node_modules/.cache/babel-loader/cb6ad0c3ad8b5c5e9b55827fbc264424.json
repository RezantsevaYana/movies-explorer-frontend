{"ast":null,"code":"// запросы к напсанному апи\nexport class MainApi {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n\n    this.checkToken = jwt => {\n      return fetch(`${this._baseUrl}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${jwt}`\n        }\n      }).then(this._checkResult);\n    };\n\n    this._checkResult = res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    };\n\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  // регистрация \n  register(_ref2) {\n    let {\n      email,\n      password,\n      name\n    } = _ref2;\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password,\n        name\n      })\n    }).then(this._checkResult);\n  }\n\n  // авторизация\n  login(_ref3) {\n    let {\n      email,\n      password\n    } = _ref3;\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(this._checkResult);\n  }\n\n  // возвращает информацию о пользователе\n  getUserInfo(jwt) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(this._checkResult);\n  }\n\n  // обновляет информацию о пользователе (email и имя)\n  updateUser(_ref4) {\n    let {\n      jwt,\n      name,\n      email\n    } = _ref4;\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: name,\n        email: email\n      }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(this._checkResult);\n  }\n\n  // удаляет сохранённый фильм по id\n  deleteMovies(_ref5) {\n    let {\n      movieId,\n      jwt\n    } = _ref5;\n    return fetch(`${this._baseUrl}/movies/${movieId}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(this._checkResult);\n  } // сохраняет фильм\n\n\n  savedMovies(_ref6) {\n    let {\n      jwt,\n      movie\n    } = _ref6;\n    return fetch(`${this._baseUrl}/movies`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      },\n      body: JSON.stringify({\n        country: movie.country,\n        director: movie.director,\n        duration: movie.duration,\n        year: movie.year,\n        description: movie.description,\n        image: `https://api.nomoreparties.co${movie.image.url}`,\n        trailerLink: movie.trailerLink,\n        thumbnail: movie.trailerLink,\n        movieId: movie.id,\n        nameRU: movie.nameRU,\n        nameEN: movie.nameEN\n      })\n    }).then(this._checkResult);\n  } // возвращает все сохранённые текущим  пользователем фильмы\n\n\n  getSavedMovies(jwt) {\n    return fetch(`${this._baseUrl}/movies`, {\n      method: \"GET\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(this._checkResult);\n  } // проверка ответа\n\n\n}\nexport const mainApi = new MainApi({\n  baseUrl: 'https://api.rezantseva.movies.nomoredomains.xyz',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["/Users/rezanceva96/movies-explorer-frontend/src/utils/MainApi.js"],"names":["MainApi","constructor","baseUrl","headers","checkToken","jwt","fetch","_baseUrl","method","then","_checkResult","res","ok","json","Promise","reject","status","_headers","register","email","password","name","body","JSON","stringify","login","getUserInfo","updateUser","deleteMovies","movieId","savedMovies","movie","country","director","duration","year","description","image","url","trailerLink","thumbnail","id","nameRU","nameEN","getSavedMovies","mainApi"],"mappings":"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","sourcesContent":["\n// запросы к напсанному апи\nexport class MainApi {\n    constructor({ baseUrl, headers }) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    };\n\n    // регистрация \n    register({ email, password, name }) {\n        return fetch(`${this._baseUrl}/signup`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({ email, password, name }),\n        }).then(this._checkResult)\n    };\n\n    // авторизация\n    login({ email, password }) {\n        return fetch(`${this._baseUrl}/signin`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({ email, password }),\n        }).then(this._checkResult)\n    };\n\n    // проверка валидности токена и полученя email для вставки в шапку сайта\n    checkToken = (jwt) => {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${jwt}`,\n            },\n        }).then(this._checkResult);\n    };\n\n    // возвращает информацию о пользователе\n    getUserInfo(jwt) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${jwt}`,\n            },\n        })\n            .then(this._checkResult);\n    };\n\n    // обновляет информацию о пользователе (email и имя)\n    updateUser({ jwt, name, email }) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            body: JSON.stringify({\n                name: name,\n                email: email,\n            }),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${jwt}`,\n            }\n        })\n            .then(this._checkResult);\n    };\n\n\n    // удаляет сохранённый фильм по id\n    deleteMovies({ movieId, jwt }) {\n        return fetch(`${this._baseUrl}/movies/${movieId}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${jwt}`,\n            },\n        })\n            .then(this._checkResult);\n    }\n\n    // сохраняет фильм\n    savedMovies({ jwt, movie }) {\n        return fetch(`${this._baseUrl}/movies`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${jwt}`,\n            },\n            body: JSON.stringify({\n                country: movie.country,\n                director: movie.director,\n                duration: movie.duration,\n                year: movie.year,\n                description: movie.description,\n                image: `https://api.nomoreparties.co${movie.image.url}`,\n                trailerLink: movie.trailerLink,\n                thumbnail: movie.trailerLink,\n                movieId: movie.id,\n                nameRU: movie.nameRU,\n                nameEN: movie.nameEN,\n            })\n        }).then(this._checkResult);\n    }\n\n    // возвращает все сохранённые текущим  пользователем фильмы\n    getSavedMovies(jwt) {\n        return fetch(`${this._baseUrl}/movies`, {\n            method: \"GET\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${jwt}`,\n            },\n        }).then(this._checkResult);\n    }\n\n\n    // проверка ответа\n    _checkResult = (res) => {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    };\n}\n\n\nexport const mainApi = new MainApi({\n    baseUrl: 'https://api.rezantseva.movies.nomoredomains.xyz',\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    },\n});\n"]},"metadata":{},"sourceType":"module"}