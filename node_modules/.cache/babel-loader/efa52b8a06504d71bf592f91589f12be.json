{"ast":null,"code":"var _jsxFileName = \"/Users/rezanceva96/movies-explorer-frontend/src/components/Movies/Movies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport moviesApi from \"../../utils/MoviesApi.js\";\nimport MoviesCard from \"../MoviesCard/MoviesCard.js\";\nimport MoviesCardList from \"../MoviesCardList/MoviesCardList\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport Footer from \"../Footer/Footer\";\nimport Header from \"../Header/Header\";\nimport Navigation from \"../Navigation/Navigation\";\nimport Preloader from \"../Preloader/Preloader.js\";\nimport { useLocation } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Movies(_ref) {\n  _s();\n\n  let {\n    onHeaderOpen,\n    handleSaveMovies,\n    handleDeleteMovies,\n    moviesList,\n    setMoviesList,\n    favoriteList,\n    moviesCount,\n    setMoviesCount,\n    addMovies,\n    setAddMovies\n  } = _ref;\n  const routes = useLocation();\n  const [isLoading, setIsLoading] = React.useState(false);\n  const valueData = localStorage.getItem('value');\n  const [value, setValue] = React.useState(valueData && routes.pathname === '/movies' ? valueData : ''); // стейт-переменная состояния тумблера\n\n  const [checkedActive, setCheckedActive] = useState(true);\n  /*\n  // при возврате - для отрисовки прошлого поиска\n  useEffect(() => {\n      localStorage.foundMovies && setMoviesList(JSON.parse(localStorage.getItem('foundMovies')))\n  }, [handleSaveMovies, handleDeleteMovies])\n  */\n  // фильтрация массива через поиск по ключевому слову\n\n  useEffect(() => {\n    const filterMovies = JSON.parse(localStorage.getItem('movies')).filter(movie => movie.nameRU.toLowerCase().indexOf(value.toLowerCase()) > -1);\n\n    if (filterMovies.length) {\n      setMoviesList(filterMovies);\n      localStorage.setItem('foundMovies', JSON.stringify(filterMovies));\n    } else {\n      setMoviesList([]);\n    }\n  }, [value]); // фильтрация массива через установку тумблера (продолжительность фильма)\n\n  useEffect(() => {\n    if (checkedActive) {\n      const newShortList = moviesList.filter(movie => movie.duration <= 40);\n      setMoviesList(newShortList);\n    } else {\n      setMoviesList([]);\n    }\n  }, [checkedActive]);\n\n  function handleSubmitSearchForm(value) {\n    setValue(value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"movies\",\n    children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n      setMoviesCount: setMoviesCount,\n      setMoviesList: setMoviesList,\n      handleSubmitSearchForm: handleSubmitSearchForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MoviesCardList, {\n      setMoviesCount: setMoviesCount,\n      moviesCount: moviesCount,\n      moviesList: moviesList,\n      handleSaveMovies: handleSaveMovies,\n      handleDeleteMovies: handleDeleteMovies,\n      favoriteList: favoriteList,\n      addMovies: addMovies,\n      setAddMovies: setAddMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Movies, \"vm/y7MoRdoi9vcUJrMRoGVH6u/g=\", false, function () {\n  return [useLocation];\n});\n\n_c = Movies;\nexport default Movies; // первоначальный рендер должен быть пустым, а сейчас карточки рендерятся сразу же\n// нужно добавить сообщения об ошибке, в случае, если фильм не найден\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Users/rezanceva96/movies-explorer-frontend/src/components/Movies/Movies.js"],"names":["React","useEffect","useState","moviesApi","MoviesCard","MoviesCardList","SearchForm","Footer","Header","Navigation","Preloader","useLocation","Movies","onHeaderOpen","handleSaveMovies","handleDeleteMovies","moviesList","setMoviesList","favoriteList","moviesCount","setMoviesCount","addMovies","setAddMovies","routes","isLoading","setIsLoading","valueData","localStorage","getItem","value","setValue","pathname","checkedActive","setCheckedActive","filterMovies","JSON","parse","filter","movie","nameRU","toLowerCase","indexOf","length","setItem","stringify","newShortList","duration","handleSubmitSearchForm"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport moviesApi from \"../../utils/MoviesApi.js\";\nimport MoviesCard from \"../MoviesCard/MoviesCard.js\";\nimport MoviesCardList from \"../MoviesCardList/MoviesCardList\";\nimport SearchForm from \"../SearchForm/SearchForm\";\nimport Footer from \"../Footer/Footer\";\nimport Header from \"../Header/Header\";\nimport Navigation from \"../Navigation/Navigation\";\nimport Preloader from \"../Preloader/Preloader.js\";\nimport { useLocation } from 'react-router';\n\nfunction Movies({ onHeaderOpen,\n    handleSaveMovies,\n    handleDeleteMovies,\n    moviesList,\n    setMoviesList,\n    favoriteList,\n    moviesCount,\n    setMoviesCount,\n    addMovies,\n    setAddMovies }) {\n    const routes = useLocation();\n\n    const [isLoading, setIsLoading] = React.useState(false);\n\n    const valueData = localStorage.getItem('value');\n    const [value, setValue] = React.useState(valueData && routes.pathname === '/movies' ? valueData : '');\n\n    // стейт-переменная состояния тумблера\n    const [checkedActive, setCheckedActive] = useState(true);\n\n    /*\n    // при возврате - для отрисовки прошлого поиска\n    useEffect(() => {\n        localStorage.foundMovies && setMoviesList(JSON.parse(localStorage.getItem('foundMovies')))\n    }, [handleSaveMovies, handleDeleteMovies])\n    */\n\n    // фильтрация массива через поиск по ключевому слову\n    useEffect(() => {\n        const filterMovies = JSON.parse(localStorage.getItem('movies')).filter((movie) =>\n            movie.nameRU.toLowerCase().indexOf(value.toLowerCase()) > -1)\n        if (filterMovies.length) {\n            setMoviesList(filterMovies)\n            localStorage.setItem('foundMovies', JSON.stringify(filterMovies))\n        } else {\n            setMoviesList([])\n        }\n    }, [value])\n\n    \n    // фильтрация массива через установку тумблера (продолжительность фильма)\n    useEffect(() => {\n        if(checkedActive) {\n            const newShortList = moviesList.filter(movie => movie.duration <= 40);\n            setMoviesList(newShortList)\n        } else {\n            setMoviesList([])\n        }\n    }, [checkedActive])\n\n\n\n    function handleSubmitSearchForm(value) {\n        setValue(value);\n    }\n\n\n    return (\n        <section className=\"movies\">\n            <SearchForm setMoviesCount={setMoviesCount}\n                setMoviesList={setMoviesList}\n                handleSubmitSearchForm={handleSubmitSearchForm}\n            >\n            </SearchForm>\n            <MoviesCardList\n                setMoviesCount={setMoviesCount}\n                moviesCount={moviesCount}\n                moviesList={moviesList}\n                handleSaveMovies={handleSaveMovies}\n                handleDeleteMovies={handleDeleteMovies}\n                favoriteList={favoriteList}\n                addMovies={addMovies}\n                setAddMovies={setAddMovies}\n            />\n            <Footer></Footer>\n        </section>\n\n\n    );\n}\n\nexport default Movies;\n\n// первоначальный рендер должен быть пустым, а сейчас карточки рендерятся сразу же\n// нужно добавить сообщения об ошибке, в случае, если фильм не найден"]},"metadata":{},"sourceType":"module"}