{"ast":null,"code":"// запросы к напсанному апи\nexport class MainApi {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n\n    this.checkToken = jwt => {\n      return fetch(`${this._baseUrl}/users/me`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${jwt}`\n        }\n      }).then(this._checkResult);\n    };\n\n    this._checkResult = res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    };\n\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  // регистрация \n  register(_ref2) {\n    let {\n      email,\n      password,\n      name\n    } = _ref2;\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password,\n        name\n      })\n    }).then(this._checkResult);\n  }\n\n  // авторизация\n  login(_ref3) {\n    let {\n      email,\n      password\n    } = _ref3;\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(this._checkResult).then(data => {\n      console.log(data.token);\n      localStorage.setItem(data.token);\n    });\n  }\n\n  // возвращает информацию о пользователе\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._checkResult);\n  }\n\n  // обновляет информацию о пользователе (email и имя)\n  editUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: data.name,\n        email: data.email\n      }),\n      headers: this._headers\n    }).then(this._checkResult);\n  }\n\n  // возвращает все сохранённые текущим  пользователем фильмы\n  getSavedMovies(token) {\n    return fetch(`${this._baseUrl}/movies`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(this._checkResult);\n  } // удаляет сохранённый фильм по id\n\n\n  deleteMovies(id) {\n    return fetch(`${this._baseUrl}/movies/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResult);\n  } // сохраняет фильм\n\n\n  savedMovies(movie) {\n    return fetch(`${this._baseUrl}/movies`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        country: movie.country,\n        director: movie.director,\n        duration: movie.duration,\n        year: movie.year,\n        description: movie.description,\n        image: movie.image,\n        trailer: movie.trailer,\n        thumbnail: movie.thumbnail,\n        movieId: String(movie.movieId),\n        nameRU: movie.nameRU,\n        nameEN: movie.nameEN\n      })\n    }).then(this._checkResult);\n  } // проверка ответа\n\n\n}\nexport const mainApi = new MainApi({\n  baseUrl: 'https://api.rezantseva.movies.nomoredomains.xyz',\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["/Users/rezanceva96/movies-explorer-frontend/src/utils/MainApi.js"],"names":["MainApi","constructor","baseUrl","headers","checkToken","jwt","fetch","_baseUrl","method","then","_checkResult","res","ok","json","Promise","reject","status","_headers","register","email","password","name","body","JSON","stringify","login","data","console","log","token","localStorage","setItem","getUserInfo","editUserInfo","getSavedMovies","deleteMovies","id","savedMovies","movie","country","director","duration","year","description","image","trailer","thumbnail","movieId","String","nameRU","nameEN","mainApi"],"mappings":"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","sourcesContent":["\n// запросы к напсанному апи\nexport class MainApi{\n    constructor({baseUrl, headers}) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    };\n\n    // регистрация \n    register({email, password, name}) {\n        return fetch(`${this._baseUrl}/signup`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({ email, password, name }),\n        }).then(this._checkResult)\n    };\n\n    // авторизация\n    login({email, password}) {\n        return fetch(`${this._baseUrl}/signin`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({ email, password}),\n        }).then(this._checkResult).then((data) => {\n            console.log(data.token)\n            localStorage.setItem(data.token)\n        })\n    };\n\n    // проверка валидности токена и полученя email для вставки в шапку сайта\n    checkToken = (jwt) => {\n        return fetch(`${this._baseUrl}/users/me`, {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${jwt}`,\n        },\n        }).then(this._checkResult);\n    };\n\n    // возвращает информацию о пользователе\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers})\n            .then(this._checkResult);\n    };\n\n    // обновляет информацию о пользователе (email и имя)\n    editUserInfo(data) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            body: JSON.stringify({\n            name: data.name,\n            email: data.email,\n            }),\n            headers: this._headers\n        })\n        .then(this._checkResult);\n    };\n\n    // возвращает все сохранённые текущим  пользователем фильмы\n    getSavedMovies(token) {\n        return fetch(`${this._baseUrl}/movies`, {\n            method: \"GET\",\n            headers: this._headers\n        }).then(this._checkResult);\n    }\n\n\n    // удаляет сохранённый фильм по id\n    deleteMovies(id) {\n        return fetch(`${this._baseUrl}/movies/${id}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n        .then(this._checkResult);\n    }\n\n    // сохраняет фильм\n    savedMovies(movie) {\n        return fetch(`${this._baseUrl}/movies`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                country: movie.country,\n                director: movie.director,\n                duration: movie.duration,\n                year: movie.year,\n                description: movie.description,\n                image: movie.image,\n                trailer: movie.trailer,\n                thumbnail: movie.thumbnail,\n                movieId: String(movie.movieId),\n                nameRU: movie.nameRU,\n                nameEN: movie.nameEN,\n            })\n        }).then(this._checkResult);\n    }\n\n    // проверка ответа\n    _checkResult = (res) => {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    };\n}\n\n\nexport const mainApi = new MainApi({\n    baseUrl: 'https://api.rezantseva.movies.nomoredomains.xyz',\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    },\n});\n\n\n\n"]},"metadata":{},"sourceType":"module"}